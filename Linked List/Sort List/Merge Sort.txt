/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        
        if(head==null || head.next==null)
            return head;
        
        ListNode slow = head, fast = head;
        ListNode temp = head;
        
        while(fast!=null && fast.next != null){
            temp = slow;
            slow = slow.next;
            fast= fast.next.next;
        }
        temp.next = null;
        
        ListNode left_list = sortList(head);
        ListNode right_list = sortList(slow);
        
        return merge_list(left_list, right_list);
    }
    
    public ListNode merge_list(ListNode l1, ListNode l2){
        ListNode sorted_temp = new ListNode(0);
        ListNode currentNode = sorted_temp;
        
        while(l1!=null && l2!=null){
            if(l1.val < l2.val){
                currentNode.next = l1;
                l1 = l1.next;
            }
            else{
                currentNode.next = l2;
                l2 = l2.next;
            }
            currentNode = currentNode.next;
        }
        
        if(l1 != null){
            currentNode.next = l1;
            l1 = l1.next;
        }
        if(l2 != null){
            currentNode.next = l2;
            l2 = l2.next;
        }
        return sorted_temp.next;
    }
}